<template>
  <!-- <text>{{text}}</text> -->
  <text>key: {{key}}</text>
  <text>text: {{text}}</text>
  <!-- <text>{{filters.translate(key,translator)}}</text> -->
</template>
<script>
import wepy from 'wepy'
import { connect } from 'wepy-redux'
import { initialLanguage } from '../store/actions'
@connect(
  {
    language (state) {
      return state.i18n.language
    },
    translator (state) {
      return state.i18n.translator
    }
  },
  {
    initialLanguage
  }
)
export default class TextI18n extends wepy.component {
  // 用法请参考 http://i18njs.com/#fun_with_pluralisation
  data = {
    text: 'a'
  }
  props = {
    // 静态传值
    key: {
      type: String
    },
    pluralisation: {
      type: Number,
      default: -1
    },
    formatting: {
      type: Object
    },
    contexts: {
      type: Object
    }
  }
  methods = {}
  // 监听器函数名必须跟需要被监听的data对象中的属性num同名，
  // 其参数中的newValue为属性改变后的新值，oldValue为改变前的旧值
  observers= {
    'data.text': function (numberA, numberB) {
      console.log('observers', numberA, numberB)
      // 在 numberA 或者 numberB 被设置时，执行这个函数
      // this.setData({
      //   sum: numberA + numberB
      // })
    },
    'language': function (numberA, numberB) {
      console.log('observers', numberA, numberB)
      // 在 numberA 或者 numberB 被设置时，执行这个函数
      // this.setData({
      //   sum: numberA + numberB
      // })
    }
  }
  watch = {
    text (newValue, oldValue) {
      console.log('watch key', newValue, oldValue)
      // this.text = newValue(this.key)
      // this.$apply()
    },
    language (newValue, oldValue) {
      console.log('watch key', newValue, oldValue)
      // this.text = newValue(this.key)
      // this.$apply()
    }
  }
  computed = {
    computedKey () {
      console.log('computed', this)
      return this.key
    }
  }
  created () {
    // this.$apply()
    // console.log(this)
    // const store = getStore()
    // const state = store.getState()
    // console.log(state)
    // this.setData({
    //   i18n: state.i18n
    // })
  }
  ready () {
    // this.text = '123456'
    this.$apply()
    console.log(this)
    this.setData({
      text: 'sdafsdf'
    })
    setTimeout(() => {
      this.setData({
        text: '23412sdafsdf'
      })
    }, 1000)
    // try {
    //   // this.text = '123456'
    //   // this.translator = state.i18n.translator
    //   // this.language = state.i18n.language
    //   // this.text = '123456'
    //   // this.text = 'b'
    //   // this.text = this.translator(this.key, this.formatting, this.contexts)
    //   // this.$apply()
    //   setTimeout(() => {
    //     this.text = 'dfgsdfgsd'
    //     this.$apply()
    //     console.log(this.$data.key, this.key, this.data)
    //   }, 6000)
    // } catch (error) { }
  }
}
</script>
