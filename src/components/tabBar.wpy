<template>
  <view class="tab-bar">
    <view class="tab-bar-border"></view>
    <block wx:for="{{list}}" wx:key="{{index}}">
      <!-- <button wx:if="{{index === 2}}" bindgetuserinfo="handleRegister" open-type="getUserInfo" class="tab-bar-item" data-path="{{item.pagePath}}" data-index="{{index}}" disabled="{{selected === index}}">
        <image src="{{selected === index ? item.selectedIconPath : item.iconPath}}"></image>
        <view style="color: {{selected === index ? selectedColor : color}}">{{item.text}}</view>
      </button> -->
      <button class="tab-bar-item" data-path="{{item.pagePath}}" data-index="{{index}}" bindtap="switchTab" disabled="{{selected === index}}">
        <image src="{{selected === index ? item.selectedIconPath : item.iconPath}}"></image>
        <view style="color: {{selected === index ? selectedColor : color}}">{{item.text}}</view>
      </button>
    </block>
  </view>
</template>
<script>
import wepy from '@wepy/core'
import store from '@/store'
import { mapState } from '@wepy/x'
import apiActions from '@/config/api.js'
import initPage from '@/mixins/initPage.js'
import { errorFormatter } from '@/config/utils.js'
wepy.component({
  store,
  mixins: [initPage],
  options: {
    styleIsolation: 'apply-shared'
  },
  data: {
    // selected: -1,
    color: '#666',
    selectedColor: '#DD5000',
    list: [
      {
        'pagePath': '/pages/home',
        'iconPath': '/statics/images/icon_share.png',
        'selectedIconPath': '/statics/images/icon_share_r.png',
        'text': 'share'
      },
      {
        'pagePath': '/pages/activityList',
        'iconPath': '/statics/images/icon_fun.png',
        'selectedIconPath': '/statics/images/icon_fun_r.png',
        'text': 'fun'
      },
      {
        'pagePath': '/pages/user',
        'iconPath': '/statics/images/icon_me.png',
        'selectedIconPath': '/statics/images/icon_me_r.png',
        'text': 'me'
      }
    ]
  },
  computed: {
    ...mapState({
      route: state => state.page.route,
      accessToken: state => state.user.accessToken
    }),
    selected: {
      get () {
        let index = this.list.findIndex(item => item.pagePath === ('/' + this.route)) || 0
        console.log('selected', index, this.route)
        return index
      },
      set (value) {
        // console.log('set selected', value)
        // this.$wx.setData({
        //   selected: value
        // })
      }
    }
  },
  methods: {
    async switchTab (e) {
      console.log('tabbar switchTab', e, this)
      const data = e.currentTarget.dataset
      if (data.index !== 1) {
        console.log('accessToken', this.accessToken)
      }
      const url = data.path
      try {
        await wepy.wx.switchTab({ url })
      } catch (e) {
        await wepy.wx.navigateTo({ url })
      }
      this.selected = data.index
      // this.$wx.setData({
      //   selected: data.index
      // })
    },
    // async userRegister (e) {
    //   return new Promise(async (resolve, reject) => {
    //     try {
    //       const { code } = await wepy.wx.login()
    //       const { userInfo = {}, encryptedData = '', iv = '' } = await wepy.wx.getUserInfo({ withCredentials: true })
    //       const { token: accessToken = '' } = await apiActions.login.wxRegister({ params: { code, encrypted_data: encryptedData, iv } }) || ''
    //       console.log('handleRegister', userInfo, accessToken)
    //       this.updateAccessToken(accessToken)
    //       resolve(accessToken)
    //     } catch (error) {
    //       reject(error)
    //     }
    //   })
    // },
    async handleRegister (e) {
      console.log('handleRegister tabbar', e)
      const { encryptedData = '', iv = '' } = e.$wx.detail || {}
      if (!encryptedData || !iv) {
        return
      }
      const { path: url, index } = e.$wx.currentTarget.dataset
      try {
        if (!this.accessToken) {
          await this.userRegister()
        }
        try {
          await wepy.wx.switchTab({ url })
        } catch (e) {
          await wepy.wx.navigateTo({ url })
        }
        this.selected = index
        // const res = await apiActions.user.getUserInfo()
        // console.log('handleRegister userInfo', res)
        // wx.showToast({ duration: 5000, title: JSON.stringify(res), icon: 'none' })
      } catch (error) {
        wx.showToast({ duration: 5000, title: errorFormatter(error, 'handleRegister'), icon: 'none' })
      }
    }
  },
  attached () {
    // console.log('tabbar attached')
  }
})
</script>
<style lang="less">
@import '~@/assets/less/lib-base.less';
@import '~@/assets/less/lib-mixins.less';
.tab-bar {
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  height: 48px;
  background: white;
  display: flex;
  padding-bottom: constant(safe-area-inset-bottom);
  padding-bottom: env(safe-area-inset-bottom);
  z-index: 100;
}

.tab-bar-border {
  background-color: rgba(0, 0, 0, 0.33);
  position: absolute;
  left: 0;
  top: 0;
  width: 100%;
  height: 1px;
  transform: scaleY(0.5);
}

.tab-bar-item {
  flex: 1;
  text-align: center;
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
  &[disabled] {
    // cursor: not-allowed;
    // pointer-events: none;
    background-color: transparent !important;
    opacity: 1 !important;
  }
}

.tab-bar-item cover-image,
.tab-bar-item image {
  width: 27px;
  height: 27px;
}

.tab-bar-item cover-view,
.tab-bar-item view {
  // margin-top: 1px;
  font-size: 10px;
  line-height: 1;
}
</style>
